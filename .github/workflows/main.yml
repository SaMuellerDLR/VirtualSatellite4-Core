name: Build

# Run this workflow every time a new commit pushed to your repository
on: push

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-16.04
    
    steps:
      # Checks out a copy of the repository
      - name: Checkout code
        uses: actions/checkout@v2
        
      # --------------------------------------------
      # Run a quicksanity check if all commits are
      # handed in by known users
      #---------------------------------------------
      - name: Verify - Authors Sanity Check
        run: ./bash/verify_commit_authors.sh known_authors.txt

  spotbugs:
    # Name the Job
    name: Spotbugs
    # Set the type of machine to run on
    runs-on: ubuntu-16.04
    needs: [verify]

    steps:
       # Checks out a copy of the repository
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-spotbugs-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-spotbugs-
            ${{ runner.os }}-local-maven-
        
      - name: Setup
        run: ./bash/setup.sh
        
      - name: Build and Test - SpotBugs - Development and Features
        run: ./bash/maven_build.sh -j spotbugs -p development
        if: ${{ !contains(github.ref, 'integration') 
             && !contains(github.ref, 'integration_snapshot') 
             && !contains(github.ref, 'development_snapshot') 
             && !contains(github.ref, 'master') 
             && !contains(github.ref, 'Release') }}
        
      - name: Build and Test - SpotBugs - Integration
        run: ./bash/maven_build.sh -j spotbugs -p integration
        if: ${{ github.ref == 'refs/heads/integration'  }}
        
      - name: Build and Test - SpotBugs - Release
        run: ./bash/maven_build.sh -j spotbugs -p release
        if: ${{ contains(github.ref, 'master') || (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        
  surefire:
    # Name the Job
    name: Surefire
    # Set the type of machine to run on
    runs-on: ubuntu-16.04
    needs: [verify]

    steps:
       # Checks out a copy of your repository
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-surefire-{{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-surefire-
            ${{ runner.os }}-local-maven-
      
      - name: Setup
        run: ./bash/setup.sh
        
      - name: Build and Test - Surefire - Development and Features
        run: ./bash/maven_build.sh -j sureheadless -p development
        if: ${{ !contains(github.ref, 'integration') 
             && !contains(github.ref, 'integration_snapshot') 
             && !contains(github.ref, 'development_snapshot') 
             && !contains(github.ref, 'master') 
             && !contains(github.ref, 'Release') }}
      
      - name: Build and Test - Surefire - Integration
        run: ./bash/maven_build.sh -j sureheadless -p integration
        if: ${{ github.ref == 'refs/heads/integration'  }}
        
      - name: Build and Test - Surefire - Release
        run: ./bash/maven_build.sh -j sureheadless -p release
        if: ${{ contains(github.ref, 'master') || (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
      
  checkstyle:
    # Name the Job
    name: Checkstyle
    # Set the type of machine to run on
    runs-on: ubuntu-16.04
    needs: [verify]

    steps:
       # Checks out a copy of your repository
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-checkstyle-
            ${{ runner.os }}-local-maven-
      
      - name: Setup
        run: ./bash/setup.sh
        
      - name: Build and Test - Checkstyle - Development and Features
        run: ./bash/maven_build.sh -j checkstyle -p development
        if: ${{ !contains(github.ref, 'integration') 
             && !contains(github.ref, 'integration_snapshot') 
             && !contains(github.ref, 'development_snapshot') 
             && !contains(github.ref, 'master') 
             && !contains(github.ref, 'Release') }}
        
      - name: Build and Test - Checkstyle - Integration
        run: ./bash/maven_build.sh -j checkstyle -p integration
        if: ${{ github.ref == 'refs/heads/integration'  }}
        
      - name: Build and Test - Checkstyle - Release
        run: ./bash/maven_build.sh -j checkstyle -p release
        if: ${{ contains(github.ref, 'master') || (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        
  deploy:
    # Name the Job
    name: Deploy
    # Set the type of machine to run on
    runs-on: ubuntu-16.04
    
    steps:
       # Checks out a copy of the repository
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository/
          key: ${{ runner.os }}-local-maven-deploy-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-local-maven-deploy-
            ${{ runner.os }}-local-maven-
        
      - name: Setup
        run: ./bash/setup.sh
        
      - name: Build-Assemble - Development
        run: ./bash/maven_build.sh -j assemble -p development
        if: ${{ !contains(github.ref, 'integration') 
             && !contains(github.ref, 'integration_snapshot') 
             && !contains(github.ref, 'development_snapshot') 
             && !contains(github.ref, 'master') 
             && !contains(github.ref, 'Release') }}  
        
      - name: Build-Assemble - Integration
        run: ./bash/maven_build.sh -j assemble -p integration
        if: ${{ github.ref == 'refs/heads/integration'  }}
        
      - name: Build-Assemble - Release
        run: ./bash/maven_build.sh -j assemble -p release
        if: ${{ contains(github.ref, 'master') || (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        env:
          github.sha:  ${{ github.sha }}
        
      - name: Create Development Tag
        run: |
         git tag -f development_snapshot
         git remote add github-mtd https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
         git push -f github-mtd development_snapshot
         git remote remove github-mtd
        if: ${{ github.ref == 'refs/heads/development'  }}
       
      - name: Create Integration Tag
        run: |
         git tag -f integration_snapshot
         git remote add github-mtd https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
         git push -f github-mtd integration_snapshot
         git remote remove github-mtd
        if: ${{ github.ref == 'refs/heads/integration'  }}
       
      - name: Deploy - Development
        if: ${{ github.ref == 'refs/heads/development'  }}
        run: |
           ./github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c delete -r development_snapshot
           ./github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c create -r development_snapshot -d "Virtual Satellite 4 Core Development Build "
           ./github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.zip" -d deploy/unsecured
           ./github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.tar.gz" -d deploy/unsecured
           ./github_release.sh -t ${{ secrets.GITHUB_TOKEN }} -c multi -r development_snapshot -p "*.pdf" -d de.dlr.sc.virsat.docs.feature/docs       

      - name: Deploy - Integration - Binaries
        if: ${{ github.ref == 'refs/heads/integration'  }}
        uses: svenstaro/upload-release-action@v2
        with:
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: deploy/unsecured/bin/**/*
         tag: integration_snapshot
         release_name: Virtual Satellite 4 Core Integration Build  
         overwrite: true
         file_glob: true
         
      - name: Deploy - Integration - Manuals
        if: ${{ github.ref == 'refs/heads/integration'  }}
        uses: svenstaro/upload-release-action@v2
        with:
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: de.dlr.sc.virsat.docs.feature/docs/*.pdf
         tag: integration_snapshot
         overwrite: true
         file_glob: true
         body: "Integration build on latest commit by Github Actions CI - ${{ github.ref }} (${{ github.sha }}) - $(date +'%F %T %Z'). This release is subject to constant change."
         
      - name: Deploy - Release - Binaries
        if: ${{ (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        uses: svenstaro/upload-release-action@v2
        with:
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: deploy/secured/bin/**/*
         tag: ${{ github.ref }}
         release_name: Virtual Satellite 4 Core Release Build  
         file_glob: true
         
      - name: Deploy - Release - Manuals
        if: ${{ (contains(github.ref, 'refs/tags/') && contains(github.ref, 'Release'))  }}
        uses: svenstaro/upload-release-action@v2
        with:
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: de.dlr.sc.virsat.docs.feature/docs/*.pdf
         tag: ${{ github.ref }}
         file_glob: true
         body: "Release build on latest commit by Github Actions CI - ${{ github.ref }} (${{ github.sha }}) - $(date +'%F %T %Z'). This is a stable release."  
